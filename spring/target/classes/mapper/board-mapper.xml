<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">

	<resultMap id="boardTypeResultSet" type="boardtype">
		<id column="BOARD_CD" property="boardCd"/>
		<result column="BOARD_NAME" property="boardName"/>
	</resultMap>

	<resultMap id="boardResultSet" type="board">
		<id column="BOARD_NO" property="boardNo"/>
		<result column="BOARD_TITLE" property="boardTitle"/>
		<result column="BOARD_WRITER" property="boardWriter"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="COUNT" property="count"/>
	</resultMap>

	<select id="selectBoardTypeList" resultMap="boardTypeResultSet">
		SELECT *
		FROM BOARD_TYPE
		ORDER BY BOARD_CD
	</select>
	
	<select id="selectList" parameterType="hashmap" resultMap="boardResultSet">
		SELECT
			BOARD_NO,
			BOARD_TITLE,
			USER_NAME AS BOARD_WRITER,
			COUNT,
			B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON B.BOARD_WRITER = M.USER_NO
		WHERE B.STATUS = 'Y' AND BOARD_CD = #{boardCode}
		<if test="keyword != null and keyword != ''">
			AND
			<choose>
				<when test="condition == 'title'">
					BOARD_TITLE LIKE '%${keyword}%'
				</when>
				<when test="condition == 'content'">
					BOARD_CONTENT LIKE '%${keyword}%'
				</when>
				<when test="condition == 'titleAndContent'">
					(BOARD_TITLE LIKE '%${keyword}%'
					OR
					BOARD_CONTENT LIKE '%${keyword}%'
					)
				</when>
				<when test="condition == 'writer'">
					USER_NAME LIKE '%${keyword}%'
				</when>
			</choose>
		</if>
		ORDER BY B.CREATE_DATE DESC
	</select>
	
	<select id="selectListCount" parameterType="hashmap" resultType="int">
		SELECT
			COUNT(*)
		FROM BOARD B
		JOIN MEMBER M ON B.BOARD_WRITER = M.USER_NO
		WHERE B.STATUS = 'Y' AND BOARD_CD = #{boardCode}
		<if test="keyword != null and keyword != ''">
			AND
			<choose>
				<when test="condition == 'title'">
					BOARD_TITLE LIKE '%${keyword}%'
				</when>
				<when test="condition == 'content'">
					BOARD_CONTENT LIKE '%${keyword}%'
				</when>
				<when test="condition == 'titleAndContent'">
					(BOARD_TITLE LIKE '%${keyword}%'
					OR
					BOARD_CONTENT LIKE '%${keyword}%'
					)
				</when>
				<when test="condition == 'writer'">
					USER_NAME LIKE '%${keyword}%'
				</when>
			</choose>
		</if>
		ORDER BY B.CREATE_DATE DESC
	</select>
	
	<select id="searchList" parameterType="string" resultMap="boardResultSet">
		SELECT
			BOARD_NO,
			BOARD_TITLE,
			USER_NAME AS BAORD_WRITER,
			COUNT,
			B.CREATE_DATE
		FROM BOARD B
		JOIN MEMBER M ON B.BOARD_WRITER = M.USER_NO
		WHERE B.STATUS = 'Y' AND BOARD_CD = #{boardCode}
		<if test="keyword != null and keyword != ''">
			AND
			<choose>
				<when test="condition == 'title'">
					BOARD_TITLE LIKE '%${keyword}%'
				</when>
				<when test="condition == 'content'">
					BOARD_CONTENT LIKE '%${keyword}%'
				</when>
				<when test="condition == 'titleAndContent'">
					(BOARD_TITLE LIKE '%${keyword}%'
					OR
					BOARD_CONTENT LIKE '%${keyword}%'
					)
				</when>
				<when test="condition == 'writer'">
					USER_NAME LIKE '%${keyword}%'
				</when>
			</choose>
		</if>
		ORDER BY B.CREATE_DATE DESC
	</select>
	
	<insert id="insertBoard" parameterType="board" useGeneratedKeys="true"> <!-- boardDao에서 넘겨준 board(board 'b')는 boardNo에 담김 -->
	
		<selectKey keyProperty="boardNo" resultType="int" order="BEFORE"> <!-- 쿼리문이 2번 실행됨. select로 boardNo에 담아주는 얕은복사가 일어남-->
			SELECT SEQ_BNO.NEXTVAL FROM DUAL
		</selectKey>
		
		<!-- 2번 쿼리문 꺼내쓰는 과정이 실행됨 -->
		INSERT INTO BOARD
		(
			BOARD_NO,
			BOARD_TITLE,
			BOARD_WRITER,
			BOARD_CONTENT,
			BOARD_CD
		) VALUES (
			#{boardNo},
			#{boardTitle},
			#{boardWriter},
			#{boardContent},
			#{boardCd}
		)
	</insert>
	
	<insert id="insertAttachment" parameterType="attachment">
		INSERT INTO ATTACHMENT(
			FILE_NO,
			REF_BNO,
			ORIGIN_NAME,
			CHANGE_NAME,
			FILE_PATH,
			FILE_LEVEL		
		) VALUES (
			SEQ_FNO.NEXTVAL,
			#{refBno},
			#{originName},
			#{changeName},
			#{filePath},
			#{fileLevel}
		)
	</insert>
	
	<!-- 
		동적 SQL문중 <foreach>
		- 특정 SQL구문을 반복할때 사용
		- 반복되는 쿼리문 사이에 구분자를 추가할수 있음.
		
		collection : 반복할 객체의 타입
		item : collection에서 순차적으로 꺼낸 값을 저장하는 변수 
		index : 현재 반복접근중인 인덱스(0,1,2,3,4...)
		
		open : 반복 전에 출력할 sql
		close : 반복 종료 후에 출력할 sql
		separator : 반복 사이 구분자
	 -->
	
	<insert id="insertAttachmentList" parameterType="list">
		INSERT INTO ATTACHMENT(FILE_NO, ORIGIN_NAME, CHANGE_NAME, REF_BNO, FILE_PATH, FILE_LEVEL)
		SELECT SEQ_FNO.NEXTVAL AS FILE_NO, C.* FROM
		(
			<foreach collection="list" item="attch" separator="UNION ALL">
				SELECT
					#{attch.originName} as ORIGIN_NAME,
					#{attch.changeName} as CHANGE_NAME,
					#{attch.refBno} as REF_BNO,
					#{attch.filePath} as FILE_PATH,
					#{attch.fileLevel} as FILE_LEVEL
				FROM DUAL
			</foreach>
		) C
	</insert>
	
	<resultMap type="boardExt" id="boardDetailResultSet">
		<id column="BOARD_NO" property="boardNo" />
		<result column="BOARD_TITLE" property="boardTitle"/>
		<result column="BOARD_CONTENT" property="boardContent"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="BOARD_WRITER" property="boardWriter"/>
		<result column="COUNT" property="count"/>
		
		<!-- ; collection: 사진 여러개를 묶어주는 것 -->
		 <collection property="attachList" ofType="attachment" javaType="java.util.List" 
		 			 resultMap="attachmentResultSet"/>

		
		<!-- 
			collection ofType : 제네릭타입,
					 javaType : 자바의 자료형 => java.util.List<Attachment>
					 property : collection결과를 저장할 boardExt타입의 필드명
		 -->
		 
		 <collection property="replyList" ofType="reply" javaType="java.util.List"
		 		     select="selectReplyList" column="BOARD_NO" />
		<!-- 
			selectReplyList의 조회결과를 boardExt vo객체의 replyList필드에 담겠다는 의미.
			replyList에 담을 때 java.util.List<reply>객체를 생성해서 담을 예정.
			selectReplyList를 호출할때 필요한 데이터(boardNo)의 경우 column="BOARD_NO"을 사용해서 현재 조회된
			resultMap내부의 BOARD_NO값을 전달해준다.
		 -->					 
							 
	</resultMap>
	
	<resultMap type="reply" id="replyResultSet">
		<id column="REPLY_NO" property="replyNo"/>
		<result column="REPLY_CONTENT" property="replyContent"/>
		<result column="REF_BNO" property="refBno"/>
		<result column="REPLY_WRITER" property="replyWriter"/>
		<result column="CREATE_DATE" property="createDate"/>
	</resultMap>
	
	<resultMap type="attachment" id="attachmentResultSet">
		<id column="FILE_NO" property="fileNo"/>
		<result column="REF_BNO" property="refBno"/>
		<result column="ORIGIN_NAME" property="originName"/>
		<result column="CHANGE_NAME" property="changeName"/>
		<result column="FILE_PATH" property="filePath"/>
		<result column="FILE_LEVEL" property="fileLevel"/>
	</resultMap>
	
	<select id="selectBoard" parameterType="int" resultMap="boardDetailResultSet">
		SELECT 
			BOARD_NO,
			USER_ID BOARD_WRITER,
			BOARD_TITLE,
			BOARD_CONTENT,
			COUNT,
			TO_CHAR(B.CREATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') CREATE_DATE,
			AT.*
		FROM BOARD B
		LEFT JOIN ATTACHMENT AT ON BOARD_NO = REF_BNO
		JOIN MEMBER M ON USER_NO = BOARD_WRITER
		WHERE BOARD_NO = #{boardNo}
		ORDER BY FILE_LEVEL
	
	</select>
	
	<update id="increaseCount" parameterType="int" >
		UPDATE BOARD
		   SET COUNT = COUNT +1
		 WHERE BOARD_NO = #{bno}
	</update>
	
	<select id="selectReplyList" resultMap="replyResultSet" parameterType="int">
		SELECT
			REPLY_NO,
			REPLY_CONTENT,
			REF_BNO,
			USER_ID REPLY_WRITER,
			R.CREATE_DATE,
			R.STATUS
		FROM REPLY R
		JOIN MEMBER M ON R.REPLY_WRITER = M.USER_NO
		WHERE REF_BNO = #{bno}
		  AND R.STATUS = 'Y'
	</select>
	
	<insert id="insertReply" parameterType="reply">
         INSERT INTO REPLY
         	(
         	REPLY_NO,
         	REPLY_WRITER,
         	REPLY_CONTENT,
         	CREATE_DATE,REF_BNO
         	)
         VALUES 
         	(
         	SEQ_RNO.NEXTVAL,
         	TO_NUMBER(#{replyWriter}),#{replyContent},SYSDATE,#{refBno})
   </insert>

	
	<select id="selectAttachment" parameterType="int" resultMap="attachmentResultSet">
		SELECT *
		  FROM ATTACHMENT
		 WHERE FILE_NO = #{fileNo}
	</select>
	
	<update id="updateBoard" parameterType="board">
		UPDATE BOARD SET
		BOARD_TITLE = #{boardTitle},
		BOARD_CONTENT = #{boardContent},
		BOARD_WRITER = #{boardWriter}
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 첨부파일 업데이트 쿼리문. 첨부파일 1개 단위로 수정 -->
	<update id="updateAttachment" parameterType="attachment">
		UPDATE ATTACHMENT SET
		ORIGIN_NAME = #{originName},
		CHANGE_NAME = #{changeName},
		FILE_PATH = #{filePath}
		WHERE REF_BNO = #{refBno} AND FILE_LEVEL = #{fileLevel}
	</update>
	
	<!-- 게시글 첨부파일 삭제 -->
	<delete id="deleteAttachment" parameterType="map">
		DELETE FROM ATTACHMENT
		WHERE REF_BNO = #{boardNo}
		AND FILE_LEVEL IN (${deletdList})	
	</delete>
	
	<select id="selectFileList" resultType="string">
		SELECT
			CHANGE_NAME
		FROM ATTACHMENT
	</select>
</mapper>
