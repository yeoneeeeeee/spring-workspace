<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!--
		log4j
		프로그램 작동시 로그를 남기기 위한 자바기반 오픈소스 로깅 라이브러리
		로그의 레벨을 지정하여 지정한 레벨 이상의 로그정보만 기록하는 방식.
		System.out.pringxx문보다 속도 및 성능면에 최적화 되어 있음. -->
	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<!-- 
			ConsoleAppender : 콘솔창에 로그정보를 출려하는 클래스
			FileAppender 	: 파일에 로그정보를 출력하는 클래스
		 -->
	 	<param name="threshold" value="INFO"/> <!-- 현재 ConsoleAppender에 대한 로그 레벨 기본값 -->
	 
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -> %-5p:현재로그레벨정보 => 기본값임-->
			<param name="ConversionPattern" value="%-5p:[%d{HH:mm:ss.SSS}] %C{1}.%M(%F:%L) - %m%n" />
		</layout>
	</appender>
	<!-- 
		%c %C : 클래스명을 표시함.
				%C{1}의 경우
				클래스명이 com.kh.spring.LogTest일때 LogTest의미  ;LogTest:클래스명 딱 하나 의미
				%C{2}의 경우
				클래스명이 com.kh.spring.LogTest일때 spring.LogTest의미
		%d : 로그시간을 출력 -> java.text.SimpleDateFormat과 동일한 출력패턴을 사용함.
		%M : 로그를 수행한 메소드명
		%m : 로그로 전달된 메세지.
		%n : 개행문자
		%F : 파일명을 출력.
		%L : 라인번호를 출력
		%p : 로그이벤트명
		
		- 그외 참고사항 -
		%l : 로깅이 발생한 위치정보 - 링크를 제공
		%t : 로그이벤트가 발생한 쓰레드명
		%% : %를 출력하기위해 사용
		%r : 어플리케이션이 시작된 이후 로깅이 발생한 시점까지의 시간(miliseconds)	 ;로그 처리하는데 걸린 시간
	 -->
	<!-- 
		DailyRollingFileAppender ?
			일정기간 단위로 로그파일을 생성하고 기록하도록 도와주는 클래스.
	 -->
	<appender name="dailyLog" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="threshole" vlaue="INFO"/>
		<param name="append" value="true"/>
		<!-- 파일 이어쓰기 여부 (true - 이어쓰기 / false - 새로쓰기) -->
		<param name="file" value="${catalina.base}/logs/kh,log"/>
		<!-- 파일을 생성할 위치. -->
		<param name="datePattern" value=".yyyyMMdd"/>
		<!-- 
			기본값 : 매일 자정에 로그파일을 바꿔주는 패턴.
			그외 : yyyyMM => 매달 바꿔주는 패턴
				  yyyyww => 매주 바꿔주는 패턴
				  yyyyMMdd a => 자정과, 정오에 로그파일을 바꿔주는 명령어
				  그외 시간, 분단위로도 설정 가능 
		(일정시간이 지나면 폐기처분함)
		-->		
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -> %-5p:현재로그레벨정보 => 기본값임-->
			<param name="ConversionPattern" value="%-5p:[%d{HH:mm:ss.SSS}] %C{1}.%M(%F:%L) - %m%n" />
		</layout>
	</appender>
	
	<!-- jdbc-remix로그출력 appender추가 -->
	<appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
				<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -> %-5p:현재로그레벨정보 => 기본값임-->
				<param name="ConversionPattern" value="%-5p:[%d{HH:mm:ss.SSS}] %C{1}.%M(%F:%L) - %m%n" />
		</layout>
	</appender>
	
	<!-- log4jdbc-remix 관련 Logger 시작 -->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="INFO"/>
		<appender-ref ref="sqlLogger"/>
	</logger>
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="INFO"/>
		<appender-ref ref="sqlLogger"/>
	</logger>
	<!-- log4jdbc-remix 관련 Logger 끝 -->
	
	
	<!-- Application Loggers -->
	<logger name="com.kh.spring">
		<level value="debug" /> <!-- ☆ 개발 후엔 info로 변경해야함. 레벨내용을 안쓰면 ConsoleAppender 내용이 나옴 -->
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
		<appender-ref ref="dailyLog" />
	</root>
	
</log4j:configuration>
