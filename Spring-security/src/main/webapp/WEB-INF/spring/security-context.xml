<beans:beans 
   xmlns="http://www.springframework.org/schema/security"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
      
      
   <!-- 암호화 인코딩 빈 등록 -->
   <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
   
   <!-- 권한 체크 설정 -->
   <!-- http? URL경로에 따른 보얀규칙을 정의해주는 태그
      
      특정 URL로 접근시 해당 URL에 접근할수 있는 구너한이 없다면, 오류페이지로 보내거나, 인증을 처리하게끔 유도할수있다.
      ★URL단위로 사용자마다 이요할수있는 권한을 직접 부여해줘야함
    -->
    <!-- 정적파일은 권한체크 제외 -->
   <http security="none" pattern="/resources/**"/>
   
   <!-- 보안구성을 자동으로 수행함 -->
   <http auto-config="true">
      <!-- /, /main.jsp혹은 로그인요청, 회원가입 요청시에는 권한체크하면안됨 -->
      <intercept-url pattern="/" access="permitAll"/>
      <intercept-url pattern="/main.jsp" access="permitAll"/>
      <intercept-url pattern="/login.me" access="permitAll"/>
      <intercept-url pattern="/memberLogin.me" access="permitAll"/>
      
      <!-- 위 4가지 경로를 제외한 모든 URL요청은 USER권한을 가지고있어야지만 접근할수 있또록 설정 -->
      <intercept-url pattern="/**" access="hasRole('USER')"/>
      <!-- 관리자 페이지용 URL권한 -->
      <intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>
      
      <!-- 
         form-login : 폼 기반 인증 설정을 지정할수 있는 태그
         - login-page : 로그인폼 페이지(인가하지 않은 url로 이동하려하면 항상 로그인페이지를 보여줌)
         - login-processing-url : 로그인폼 제출시 해당폼의 정보를 처리하는 url지정 / 별도의 핸들러 작성할 필요 없음 
                           (로그인페이지에서 로그인시 login-processing-url의 속성값 제시 => 입력받은 아이디, 비밀번호로 값을 검증하여 로그인 인증처리를 수행)
                           (이때 SecurityServiceImpl내부의 메서드가 사용된다)
         - username-parameter/password-parameter : 로그인제출폼에서 id/pw에 해당하는  name값이 username/password가 아닌꼉우 지정
       -->
      <form-login login-page="/memberLogin.me" 
      login-processing-url="/login.me" 
      username-parameter="userId" 
      password-parameter="userPwd"/>
      
      <!-- 로그아웃 -->
      <logout logout-url="/logout.me" 
      invalidate-session="true" 
      logout-success-url="/"/> 
      
      <!-- 
         remember-me : session-timeout시간 이상으로 사용자정보를 관리
         사용자의 인증정보를 브라우저에 저장하여 자동으로 로그인 되게 하는 기능
         
         - data-source-ref : 유효한 사용자인지 검사하며, 접속한 클라이언트의 정보를 보관할 테이블을 생성할 데이터베이스bean객첼르 속성값으로 추가(PERSISTENT_LOGINS테이블)
                       스프링 시큐리티가 자동으로 테이블을 생성하여, 토큰을 저장하고 검증하기위한 테이블로 시큐리티가 자체적으로 관리하기때문에 개발자가 관리할 필요 없음
         
         - token-validity-seconds : 토큰 유효 시간
       -->
      <remember-me data-source-ref="dataSource" token-validity-seconds="1209600"/> <!-- 약 2주 -->
      
      <!-- 사용자가 권한 없는 페이지에 접근시 처리할 url -->
      <access-denied-handler error-page="/error/accessDenied.do"/>      
   </http>
   
   <!-- 빈객체 스캔 -->
   <context:component-scan base-package="com.kh.spring.security"/>
   <!-- 
      인증/권한 검사용 manager 빈 설정
      authenication-manager, provider : 인증을 수행할 bean객체 지정
                                실제 인증처리를 담당하며, 인증처리용 로직을 securityService 내부에 작성
                                인증 성공시(로그인 성공) 인증된 사용자 정보(UserDetails)를 반환
    -->
    <authentication-manager>
       <authentication-provider user-service-ref="securityService">
          <password-encoder ref="bcryptPasswordEncoder"/>
       </authentication-provider>
    </authentication-manager>
</beans:beans>